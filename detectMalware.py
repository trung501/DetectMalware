from fastapi import FastAPI, File, UploadFile
from starlette.responses import RedirectResponse
import pandas as pd
import itertools
import pefile
import os
import tempfile
import unidecode
import numpy as np
from joblib import load


# creating fastApi app
app = FastAPI()
loadPipe = load('Model.nckh')


def createDataframeFromPEdump(nameFile, pe):

    dosHeaders = ['e_magic', 'e_cblp', 'e_cp', 'e_crlc', 'e_cparhdr',
                  'e_minalloc', 'e_maxalloc', 'e_ss', 'e_sp', 'e_csum', 'e_ip', 'e_cs',
                  'e_lfarlc', 'e_ovno', 'e_oemid', 'e_oeminfo', 'e_lfanew']
    fileHeaders = ['Machine',
                   'NumberOfSections', 'TimeDateStamp', 'PointerToSymbolTable',
                   'NumberOfSymbols', 'SizeOfOptionalHeader', 'Characteristics']
    optionalHeaders = ['Magic',
                       'MajorLinkerVersion', 'MinorLinkerVersion', 'SizeOfCode',
                       'SizeOfInitializedData', 'SizeOfUninitializedData', 'AddressOfEntryPoint', 'BaseOfCode',
                       'ImageBase', 'SectionAlignment', 'FileAlignment', 'MajorOperatingSystemVersion',
                       'MinorOperatingSystemVersion', 'MajorImageVersion', 'MinorImageVersion',
                       'MajorSubsystemVersion', 'MinorSubsystemVersion', 'SizeOfHeaders',
                       'CheckSum', 'SizeOfImage', 'Subsystem', 'DllCharacteristics',
                       'SizeOfStackReserve', 'SizeOfStackCommit', 'SizeOfHeapReserve',
                       'SizeOfHeapCommit', 'LoaderFlags', 'NumberOfRvaAndSizes']
    imageDirectory = ['ImageDirectoryEntryExport', 'ImageDirectoryEntryImport',
                      'ImageDirectoryEntryResource', 'ImageDirectoryEntryException',
                      'ImageDirectoryEntrySecurity']

    dheaders = {}
    fheaders = {}
    oheaders = {}
    imd1 = {}

    df = pd.DataFrame({"Name": nameFile}, index=[0])

    for x in dosHeaders:
        dheaders[x] = getattr(pe.DOS_HEADER, x)
    df = pd.concat([df, pd.DataFrame(dheaders, index=[0])], axis=1)
    # df = pd.DataFrame(dheaders, index=[0])

    for i in fileHeaders:
        fheaders[i] = getattr(pe.FILE_HEADER, i)
    df = pd.concat([df, (pd.DataFrame(fheaders, index=[0]))], axis=1)

    for y in optionalHeaders:
        oheaders[y] = getattr(pe.OPTIONAL_HEADER, y)
    df = pd.concat([df, (pd.DataFrame(oheaders, index=[0]))], axis=1)

    for q in pe.OPTIONAL_HEADER.DATA_DIRECTORY:
        imd1[q.name] = q.VirtualAddress
    imd1 = dict(itertools.islice(imd1.items(), 5))
    df = pd.concat([df, (pd.DataFrame(imd1, index=[0]))], axis=1)
    return df


def getPredictions(df):
    df = np.array(df)
    df = df.reshape(1, -1)
    results = loadPipe.predict_proba(df)
    return results[0]


@app.get("/")
def index():
    return RedirectResponse(url="/docs")


@app.post("/createFeature")
def createFeature(file: UploadFile = File(...), malware: bool = False):
    extension = os.path.splitext(file.filename)[1]
    _, path = tempfile.mkstemp(prefix='parser_', suffix=extension)
    nameFile = unidecode.unidecode(file.filename).replace(" ", "_")
    with open(path, 'ab') as f:
        for chunk in iter(lambda: file.file.read(10000), b''):
            f.write(chunk)
    try:
        # extract content
        content = pefile.PE(path, fast_load=True)
        dataframe = createDataframeFromPEdump(nameFile, content)
        malware = {'Malware': int(malware)}
        dataframe = pd.concat(
            [dataframe, (pd.DataFrame(malware, index=[0]))], axis=1)
        print(dataframe)

        return dataframe.to_dict(orient="index")
        os.close(_)
        os.remove(path)
    except Exception as e:
        print(e)
        return {"error": "Co loi xay ra"}


@app.post("/detectMalware")
def detectMalware(file: UploadFile = File(...)):
    extension = os.path.splitext(file.filename)[1]
    _, path = tempfile.mkstemp(prefix='parser_', suffix=extension)
    nameFile = unidecode.unidecode(file.filename).replace(" ", "_")
    with open(path, 'ab') as f:
        for chunk in iter(lambda: file.file.read(10000), b''):
            f.write(chunk)
    try:
        content = pefile.PE(path, fast_load=True)
        img = None
        dataframe = createDataframeFromPEdump(nameFile, content)
        dataframe.drop(columns=['Name'], inplace=True)
        binary_preds = getPredictions(dataframe)
        print('Malicious percentage : '+str(binary_preds[1]*100))
        if binary_preds[1] > 0.6:
            return {"PE": True, 'Malware': True, 'Percentage': str(binary_preds[1]*100)}
        else:
            return {"PE": True, 'Malware': False, 'Percentage': str(binary_preds[1]*100)}
    except Exception as e:
        print(e)
        return {"PE": False, 'Status': 'This is not a PE file'}
